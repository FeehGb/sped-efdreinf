<?php
    
    require_once("../funcoes/qrcode.php");
    
    /**
     * function nfe_qrcode_gerar
     * 
     * Cria uma url e uma imagem de qrcode
     * 
     *
     * @param String $xml_path  caminho do xml
     * @param String $urichave   url do qrcode, muda confome o estado e ambiente
     * @return void
     */
    function nfe_qrcode2_gerar($xml_path, $urichave, $tempDIr, $appendOnXml=false, $token)
    {
        
        
        
        // Abre o arquivo XML e cria o objeto cloobal nfe_qrcode_xml;
        nfe_qrcode_openXml($xml_path);
        
        // Cria a url com base nos dados do xml
        $url = nfe_qrcode_createUrl($urichave, $tempDIr, $token);
        
        // se for para anexar no xml
        if ($appendOnXml)
        {
            // insere a tag de qrcode no xml 
            nfe_qrcode_appendOnXml($url, $urichave);
            
            // salva o xml
            nfe_qrcode_salvar($xml_path);
        }
        
        // se nao anexar no xml, retorna a url
        else
        {
            // remove as tags que o cobol envia o token
            nfe_qrcode_removerInfNFeSupl();
            
            // salva o xml
            nfe_qrcode_salvar($xml_path);
            
        }
        
        // retorna
        return $url;
    }
    
    
    /**
     * function nfe_qrcode_openXml
     * 
     * Abre o arquivo XML e cria o objeto cloobal nfe_qrcode_xml
     *
     * @param String $xml_path caminho do xml
     * @return void
     */
    function nfe_qrcode_openXml($xml_path)
    {
        global $nfe_qrcode_xml;
        
        $xml = file_get_contents($xml_path);
        
        $nfe_qrcode_xml = new DOMDocument('1.0', 'utf-8');
        $nfe_qrcode_xml->preservWhiteSpace = false; 
        $nfe_qrcode_xml->loadXML($xml);
    }
    
    
    /**
     * function nfe_qrcode_createUrl
     * 
     * extrai as informacoes do xml para criar a url.
     * 
     * @param  String $urlBase url do qrcode, muda confome o estado e ambiente
     * @return String $url url do qrcode
     */
    function nfe_qrcode_createUrl($urichave, $tempDIr, $token)
    {
        // extrai os dados do xml
        $idToken     = $token["idToken"]                 ; 
        $token       = $token["token"]                   ; 
        $chave       = nfe_qrcode_xml_vl("infNFe", "Id") ; 
        $tpAmb       = nfe_qrcode_xml_vl("tpAmb")        ; 
        $tpEmis      = nfe_qrcode_xml_vl("tpEmis")       ; 
        $CNPJdest    = nfe_qrcode_xml_vl("CNPJ")         ; 
        $dhEmi       = nfe_qrcode_xml_vl("dhEmi")        ; 
        $vICMS       = nfe_qrcode_xml_vl("vICMS")        ; 
        $chave       = str_replace('NFe', '', $chave)    ; 
        $idToken     = (int)$idToken                     ; 
        $versao      = "2"                               ; 
        
        if ($tpEmis != 9){
            $params = "$chave|$versao|$tpAmb|$idToken" ; 
        } else {
            $day_dhEmi   = date("d", strtotime($dhEmi))      ;     
            $vNF         = nfe_qrcode_xml_vl("vNF")          ; 
            $vNF         = number_format($vNF, 2, '.', '')   ;
            $DigestValue = nfe_qrcode_xml_vl("DigestValue")  ; 
            $DigestValue = strtoupper(str2Hex($DigestValue)) ; 
            
            $params = "$chave|$versao|$tpAmb|$day_dhEmi|$vNF|$DigestValue|$idToken";
        }
        
        $hash =  strtoupper( sha1( "$params$token" ) ) ; 
        #$url  = "$urichave/nfce/qrcode?p=$params|$hash";
        
        $url  = "$urichave->chave$urichave->rota?p=$params|$hash";
        // verifyQrCode($url, $tpEmis); 
        
        return $url;
    }
    
    
    /**
     * function nfe_qrcode_appendOnXml
     * 
     * coloca o qrcode no xml
     *
     * @param String $url url do qrcode
     * @return void
     */
    function nfe_qrcode_appendOnXml($url, $urichave)
    {
        global $nfe_qrcode_xml;
        
        nfe_qrcode_removerInfNFeSupl();
        
        $stringQrCode = $nfe_qrcode_xml->createCDATASection($url);
        
        $qrCode = $nfe_qrcode_xml->createElement("qrCode");
        $qrCode->appendChild($stringQrCode);
        
        $infNFeSupl = $nfe_qrcode_xml->createElement("infNFeSupl");
        $infNFeSupl->appendChild($qrCode);
        
        $urlChave = $nfe_qrcode_xml->createElement('urlChave', $urichave->chave);
        $infNFeSupl->appendChild($urlChave);
        
        $NFe = $nfe_qrcode_xml->getElementsByTagName("NFe")->item(0);
        $Signature = $nfe_qrcode_xml->getElementsByTagName("Signature")->item(0);
        $NFe->insertBefore($infNFeSupl,$Signature);
    }
    
    
    /**
     * function nfe_qrcode_salvar
     * 
     * salva o xml com o qrcode
     *
     * @param String $xml_path caminho do xml
     * @return void
     */
    function nfe_qrcode_salvar($xml_path)
    {
        global $nfe_qrcode_xml;
        
        $xml = $nfe_qrcode_xml->saveXML();
        
        // tira a tag de <?xml, pois estava ficando com ela no meio do arquivo
        $xml = str_replace(array(
            '<?xml version="1.0" encoding="utf-8"?>',
        ), "", $xml);
        
        createValidacao($xml_path, $xml);
        file_put_contents($xml_path, $xml);
    }
    
    
    function createValidacao($xml_path, $xml)
    {
        // Cria o arquivo de validacao novamente, usado nos testes automatizados
        $validacao = $xml;
        $validacao = explode('<NFe ' , $validacao)[1];
        $validacao = explode('</NFe>', $validacao)[0];
        $validacao = "<NFe $validacao </NFe>";
        $xml_pathValid = str_replace('.xml', ".validacao.xml", $xml_path);
        
        file_put_contents($xml_pathValid, $validacao);
    }
    
    
    // Remove as tags ja usadas
    function nfe_qrcode_removerInfNFeSupl()
    {
        global $nfe_qrcode_xml;
        
        $infNFeSupl = $nfe_qrcode_xml->getElementsByTagName("infNFeSupl")->item(0);
        
        if (!empty($infNFeSupl)){
            $infNFeSupl->parentNode->removeChild($infNFeSupl);
        }
    }
    
    // converte string para hexadecimal
    function nfe_qrcode_String2Hex($string){
        $hex='';
        for ($i=0; $i < strlen($string); $i++){
            $hex .= dechex(ord($string[$i]));
        }
        return $hex;
    }
    
    
    // retorna um elemento pelo nopme da tag
    function nfe_qrcode_getElement($tagName)
    {
        global $nfe_qrcode_xml;
        $elm = $nfe_qrcode_xml->getElementsByTagName($tagName)->item(0) ; 
        return $elm;
    }
    
    
    // retorna o valor de uma tag ou atributo
    function nfe_qrcode_xml_vl($tagName, $attr=false)
    {
        if ($attr === false) {
            if ( isset( nfe_qrcode_getElement($tagName)->nodeValue ) ) {
                $value = nfe_qrcode_getElement($tagName)->nodeValue;
            }else{
                $value = "";
            }
        } else {
            $value = nfe_qrcode_getElement($tagName)->getAttribute($attr) ;
        }
        
        return $value;
    }
    
    
    function str2Hex($str)
    {
        $hex = "";
        $iCount = 0;
        $tot = strlen($str);
        do {
            $hex .= sprintf("%02x", ord($str{$iCount}));
            $iCount++;
        } while ($iCount < $tot);
        return $hex;
    }
    
    
    // Verifica a integridade do qrCode, usado apenas para debugar e desenvolver
    function verifyQrCode($qrcode, $tpEmis){ // return false; 
        
        $online_regex = array(
            "/^([0-9]{34}(1|4)[0-9]{9})$/"  , // "Chave de Acesso"   
            "/^[2]$/"                       , // "Versao do QR Code" 
            "/^[1-2]$/"                     , // "Tipo do Ambiente"  
            "/^(0|[1-9]{1}([0-9]{1,5})?)$/" , // "Identificador CSC" 
            "/^[A-Fa-f0-9]{40}$/"           , // "Codigo Hash"       
        );
        
        $online_names = array(
            "Chave de Acesso"   , 
            "Versao do QR Code" , 
            "Tipo do Ambiente"  , 
            "Identificador CSC" , 
            "Codigo Hash"       , 
        );
        
        $offline_regex = array(
            "/^([0-9]{34}9[0-9]{9})$/"                             , // "Chave de Acesso"        
            "/^[2]$/"                                              , // "Versao do QR Code"      
            "/^[1-2]$/"                                            , // "Tipo do Ambiente"       
            "/^([0]{1}[1-9]{1}|[1-2]{1}[0-9]{1}|[3]{1}[0-1]{1})$/" , // "Dia da data de emissao" 
            "/^(0|0\.[0-9]{2}|[1-9]{1}[0-9]{0,12}(\.[0-9]{2})?)$/" , // "Valor total"            
            "/^[A-Fa-f0-9]{56}$/"                                  , // "Digest Value"           
            "/^(0|[1-9]{1}([0-9]{1,5})?)$/"                        , // "Identificador CSC"      
            "/^[A-Fa-f0-9]{40}$/"                                  , // "Codigo Hash"            
        );
        
        $offline_names = array(
            "Chave de Acesso"        , 
            "Versao do QR Code"      , 
            "Tipo do Ambiente"       , 
            "Dia da data de emissao" , 
            "Valor total"            , 
            "Digest Value"           , 
            "Identificador CSC"      , 
            "Codigo Hash"            , 
        );
        
        
        $params = explode("?p=", $qrcode)[1];
        
        // $params = "9999{$params}3";
        
        $params = explode('|', $params);
        
        $nPrams = count($params);
        
        if ($tpEmis != 9){
            $_names = $online_names ; 
            $_regex = $online_regex ; 
        } else {
            $_names = $offline_names ; 
            $_regex = $offline_regex ; 
        }
        
        for ($x=0 ; $x < count($params) ; $x++)
        {
            $test = preg_match($_regex[$x], $params[$x]);
            
            if (!$test){
                echo "{$_names[$x]}\n" ; 
                echo "{$_regex[$x]}\n" ; 
                echo "{$params[$x]}\n" ; 
                var_dump($test);
                echo "------------------------\n" ; 
            } else {
                echo "{$_names[$x]} : OK \n" ; 
                echo "------------------------\n" ; 
            }
        }
        // echo $qrcode;
    }
    
    